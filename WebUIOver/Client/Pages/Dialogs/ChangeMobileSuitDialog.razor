@using WebUIOver.Shared.Dto.Common
@using WebUIOver.Client.Services.Name
@inject ILogger<ChangeMobileSuitDialog> Logger
@inject ISnackbar Snackbar
@inject INameService NameService;

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

    .selected > td {
        color: white !important;
    }

    .selected > td .mud-input {
        color: white !important;
    }
</style>

<MudDialog>
    <DialogContent>
        <MudTable Elevation="5" Items="@_mobileSuits" Filter="@Filter" @ref="_mudTable" @bind-SelectedItem="@_selectedMobileSuit"
                  RowClassFunc="@SelectedRowClassFunc" T="MobileSuit" Hover="true" FixedHeader="true">
            <ColGroup>
                <col style="width: 50px;" />
                <col />
            </ColGroup>
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="false"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<MobileSuit, object>(x => x.Id))">
                        Id
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(SortByMsName())">
                        @localizer["msdialog_ms"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh Style="text-align: center;">
                    <MudTableSortLabel SortBy="@(SortByPilot())">
                        @localizer["msdialog_pilot"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(SortBySeiyuu())">
                        @localizer["msdialog_pilot_seiyuu"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(SortBySeries())">
                        @localizer["msdialog_series"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<MobileSuit, object>(x => x.Cost))">
                        Cost
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<MobileSuit, object>(x => x.MasteryPoint))">
                        @localizer["msdialog_mastery"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<MobileSuit, object>(x => x.MasteryPoint))">
                        EXP
                    </MudTableSortLabel>
                </MudTh>
                @{
                    if (Mode == "IncludePose")
                    {
                        <MudTh>
                            <MudTableSortLabel SortBy="@(new Func<MobileSuit, object>(SortByPose()))">
                                @localizer["has_ms_sticker_pose_title"]
                            </MudTableSortLabel>
                        </MudTh>
                    }
                }
            </HeaderContent>
            <RowTemplate>
                @{
#pragma warning disable CS8602
                }
                @{
                    var lang = Thread.CurrentThread.CurrentCulture.Name;
                }
                <MudTd DataLabel="Id" Class="cursor-pointer">@context.Id</MudTd>
                <MudTd DataLabel="@localizer["msdialog_ms"]" Class="cursor-pointer">
                    @{
                        var mobileSuitImagePath = $"images/mobile_suits/{context.Id}.webp";
                    }
                    <div class="d-flex flex-grow-1 gap-4">
                        <div class="d-flex flex-none my-auto">
                            <MudImage ObjectPosition="ObjectPosition.Center" Src="@mobileSuitImagePath" Fluid="true" ObjectFit="ObjectFit.Cover" Width="120"/>
                        </div>
                        <div class="d-flex my-auto">
                            @NameService.GetMobileSuitName(context.Id)
                        </div>
                    </div>
                </MudTd>
                <MudTd DataLabel="@localizer["msdialog_pilot"]" Class="cursor-pointer" Style="text-align: center">
                    @{
                        var pilotImagePath = $"images/pilots/{context.Id}_0.webp";
                        var pilotName = @NameService.GetMobileSuitPilotName(context.Id);

                        if (pilotName == "-" || pilotName == "?" || pilotName == "/")
                        {
                            @NameService.GetMobileSuitPilotName(context.Id)
                        }
                        else
                        {
                            <MudImage ObjectPosition="ObjectPosition.Center" Src="@pilotImagePath" Fluid="true" ObjectFit="ObjectFit.Cover" Width="180"/>
                            <br/>
                            @NameService.GetMobileSuitPilotName(context.Id)
                        }
                    }
                </MudTd>
                <MudTd DataLabel="@localizer["msdialog_pilot_seiyuu"]" Class="cursor-pointer">@NameService.GetMobileSuitSeiyuuName(context.Id)</MudTd>
                <MudTd DataLabel="@localizer["msdialog_series"]" Class="cursor-pointer">@NameService.GetMobileSuitSeriesName(context.Id)</MudTd>
                @{
                    var cost = "N/A";
                    var costStyle = "";
                    if (context.Id > 0)
                    {
                        cost = context.Cost.ToString();

                        if (context.Cost == 1500)
                        {
                            costStyle = "font-style: italic; font-weight: bold; color: rgb(153, 255, 0);";
                        }
                        
                        if (context.Cost == 2000)
                        {
                            costStyle = "font-style: italic; font-weight: bold; color: rgb(255, 241, 29);";
                        }
                        
                        if (context.Cost == 2500)
                        {
                            costStyle = "font-style: italic; font-weight: bold; color: rgb(255, 137, 0);";
                        }
                        
                        if (context.Cost == 3000)
                        {
                            costStyle = "font-style: italic; font-weight: bold; color: rgb(247, 0, 58);";
                        }

                        if (context.Id > 0 && context.Cost == 0)
                        {
                            cost = "ALL";
                            costStyle = "font-style: italic;";
                        }
                    }
                }
                <MudTd DataLabel="Cost" Class="cursor-pointer" Style="@costStyle">@cost</MudTd>
                 @{
                    if (context.Id == 0)
                    {
                        <MudTd DataLabel="@localizer["msdialog_mastery"]" Class="cursor-pointer">N/A</MudTd>
                    }
                    else
                    {
                        var familiarity = context.MasteryDomain;

                        var masteryImagePath = $"images/mastery/mobile_suit/{familiarity.Id}.webp";

                        <MudTd DataLabel="@localizer["msdialog_mastery"]" Class="cursor-pointer my-auto">
                            <MudImage ObjectPosition="ObjectPosition.Center" Src="@masteryImagePath" Width="100" Fluid="true" ObjectFit="ObjectFit.Cover"/>
                        </MudTd>
                    }
                 }
                @{
                    var masteryPoint = "N/A";
                    if (context.Id > 0)
                    {
                        masteryPoint = context.MasteryPoint.ToString();
                    }
                }
                <MudTd DataLabel="EXP" Class="cursor-pointer">@masteryPoint</MudTd>
                @{
                    if (Mode == "IncludePose")
                    {
                        <MudTd DataLabel="@localizer["has_ms_sticker_pose_title"]" Class="cursor-pointer">@GetPoseStatus(context)</MudTd>
                    }
                }
                @{
#pragma warning restore CS8602
                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@_pageSizeOptions" />
            </PagerContent>
        </MudTable>
        <MudText Class="mt-4 d-block" Typo="Typo.caption">
            <b>Selected Mobile Suit:</b> @_selectedMobileSuit?.Value | @_selectedMobileSuit?.ValueJP | @_selectedMobileSuit?.ValueCN
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public List<MobileSuit> AggregatedMobileSuits { get; set; } = new();
    
    [Parameter]
    public uint Data { get; set; }

    [Parameter]
    public string Mode { get; set; } = "Normal";

    private MobileSuit? _selectedMobileSuit;

    private int _selectedPage;

    private IReadOnlyList<MobileSuit> _mobileSuits = new List<MobileSuit>();

    private string _searchString = string.Empty;

    private readonly int[] _pageSizeOptions = { 5, 10, 25, 50, 100 };

    private MudTable<MobileSuit> _mudTable = null!;
    
    // ReSharper disable once NotAccessedField.Local
    private int _selectedRowNumber = -1;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _mobileSuits = AggregatedMobileSuits;
        _selectedMobileSuit = AggregatedMobileSuits.FirstOrDefault(ms => ms.Id == Data);
        var firstPageOption = _pageSizeOptions.ToList().FirstOrDefault();
        _selectedPage = CalculateCurrentPage(_mobileSuits, _selectedMobileSuit, firstPageOption);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_selectedMobileSuit != null)
        {
            _mudTable.SelectedItem = _selectedMobileSuit;
            if (firstRender)
            {
                _mudTable.CurrentPage = _selectedPage;
            }
        }
    }

    private int CalculateCurrentPage<T>(IEnumerable<T> items, T selectedItem, int rowsPerPage)
    {
        // Convert the IEnumerable to a list for better performance (if it's not already a list).
        List<T> itemList = items.ToList();

        // Find the index of the selected item in the list.
        int selectedIndex = itemList.IndexOf(selectedItem);

        if (selectedIndex < 0)
        {
            // The selected item is not found in the list.
            Logger.LogError("Selected item is not part of the provided items list");
            selectedIndex = 0;
        }

        // Calculate the current page using integer division.
        int currentPage = selectedIndex / rowsPerPage;

        return currentPage;
    }

    private bool Filter(MobileSuit? mobileSuit)
    {
        if (mobileSuit is null)
        {
            return false;
        }
        var aggregate = $"{mobileSuit.Value}{mobileSuit.ValueJP}{mobileSuit.ValueCN}{mobileSuit.ValueTC}{mobileSuit.ValueTC2}{mobileSuit.Pilot}{mobileSuit.PilotJP}{mobileSuit.PilotCN}{mobileSuit.PilotTC}{mobileSuit.PilotTC2}{mobileSuit.PilotSeiyuu}{mobileSuit.PilotSeiyuuJP}{mobileSuit.PilotSeiyuuCN}{mobileSuit.PilotSeiyuuTC}{mobileSuit.PilotSeiyuuTC2}{mobileSuit.Series}{mobileSuit.SeriesJP}{mobileSuit.SeriesCN}{mobileSuit.SeriesTC}{mobileSuit.SeriesTC2}";
        
        return string.IsNullOrEmpty(_searchString) || aggregate.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void Submit()
    {
        if (_selectedMobileSuit is null)
        {
            return;
        }
        
        var selectedId = _selectedMobileSuit.Id;

        if (selectedId >= 50001)
        {
            Snackbar.Add(@localizer["random_ms_selected"], Severity.Error);
            return;
        }

        Data = selectedId;
        MudDialog.Close(DialogResult.Ok(Data));
    }

    private void Cancel() => MudDialog.Cancel();

    private string SelectedRowClassFunc(MobileSuit element, int rowNumber)
    {
        if (_mudTable.SelectedItem != null && _mudTable.SelectedItem.Equals(element))
        {
            _selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private Func<MobileSuit, object> SortByMsName()
    {
        if (Thread.CurrentThread.CurrentCulture.Name == "en-US")
        {
            return ms => ms.Value;
        }

        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hans")
        {
            return ms => ms.ValueCN;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant")
        {
            return ms => ms.ValueTC;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant-TW")
        {
            return ms => ms.ValueTC2;
        }

        return ms => ms.ValueJP;
    }
    
    private Func<MobileSuit, object> SortByPilot()
    {
        if (Thread.CurrentThread.CurrentCulture.Name == "en-US")
        {
            return ms => ms.Pilot;
        }

        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hans")
        {
            return ms => ms.PilotCN;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant")
        {
            return ms => ms.PilotTC;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant-TW")
        {
            return ms => ms.PilotTC2;
        }

        return ms => ms.PilotJP;
    }
    
    private Func<MobileSuit, object> SortBySeiyuu()
    {
        if (Thread.CurrentThread.CurrentCulture.Name == "en-US")
        {
            return ms => ms.PilotSeiyuu;
        }

        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hans")
        {
            return ms => ms.PilotSeiyuuCN;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant")
        {
            return ms => ms.PilotSeiyuuTC;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant-TW")
        {
            return ms => ms.PilotSeiyuuTC2;
        }

        return ms => ms.PilotSeiyuuJP;
    }
    
    private Func<MobileSuit, object> SortBySeries()
    {
        if (Thread.CurrentThread.CurrentCulture.Name == "en-US")
        {
            return ms => ms.Series;
        }

        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hans")
        {
            return ms => ms.SeriesCN;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant")
        {
            return ms => ms.SeriesTC;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant-TW")
        {
            return ms => ms.SeriesTC2;
        }

        return ms => ms.SeriesJP;
    }

    private Func<MobileSuit, object> SortByPose()
    {
        return x => GetPoseStatus(x);
    }

    private string GetPoseStatus(MobileSuit mobileSuit)
    {
        var poses = mobileSuit.Poses;
        
        if (poses is null)
        {
            return localizer["has_no_pose"];
        }

        if (poses.Count is 0)
        {
            return localizer["has_no_pose"];
        }
        
        return localizer["has_pose"];
    }
}