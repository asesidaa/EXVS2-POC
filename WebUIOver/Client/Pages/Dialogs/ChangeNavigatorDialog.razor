@using WebUIOver.Shared.Dto.Common
@using WebUIOver.Client.Services.Name
@using WebUIOver.Client.Services.Navi
@inject INaviDataService NaviDataService
@inject ILogger<ChangeNavigatorDialog> Logger
@inject ISnackbar Snackbar
@inject INameService NameService

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

<MudDialog>
    <DialogContent>
        <MudTable Elevation="5" Items="@_list" Filter="@Filter" @ref="_mudTable" OnRowClick="@OnRowClick" RowClassFunc="@SelectedRowClassFunc" T="Navigator" Hover="true" FixedHeader="true">
            <ColGroup>
                <col style="width: 50px;" />
                <col />
            </ColGroup>
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="false"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<Navigator, object>(x => x.Id))">
                        Id
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@SortByNaviName()">
                        @localizer["navidialog_navi"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@SortBySeriesName()">
                        @localizer["navidialog_series"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@SortBySeiyuuName()">
                        @localizer["navidialog_seiyuu"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<Navigator, object>(x => x.ClosenessPoint))">
                        @localizer["navidialog_closeness"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="@(new Func<Navigator, object>(x => x.ClosenessPoint))">
                        EXP
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                @{
#pragma warning disable CS8602
                }
                <MudTd DataLabel="Id" Class="cursor-pointer">@(context.Id)</MudTd>
                <MudTd DataLabel="@localizer["navidialog_navi"]" Class="cursor-pointer">
                    @{
                        var naviImagePath = $"images/navis/{context.Id}.webp";
                    }
                    <div class="d-flex flex-grow-1 gap-4">
                        <div class="d-flex flex-none my-auto">
                            <MudImage ObjectPosition="ObjectPosition.Center" Src="@naviImagePath" Fluid="true" ObjectFit="ObjectFit.Cover" Width="120"/>
                        </div>
                        <div class="d-flex flex-none my-auto">
                            @NameService.GetNavigatorName(context.Id)
                        </div>
                    </div>
                </MudTd>
                <MudTd DataLabel="@localizer["navidialog_series"]" Class="cursor-pointer">@NameService.GetNavigatorSeriesName(context.Id)</MudTd>
                <MudTd DataLabel="@localizer["navidialog_seiyuu"]" Class="cursor-pointer">@NameService.GetNavigatorSeiyuuName(context.Id)</MudTd>
                @{
                    if (context.Id == 0)
                    {
                        <MudTd DataLabel="@localizer["navidialog_closeness"]" Class="cursor-pointer">N/A</MudTd>
                    }
                    else
                    {
                        var familiarity = context.FamiliarityDomain;

                        if (familiarity.UseDescription)
                        {
                            <MudTd DataLabel="@localizer["navidialog_closeness"]" Class="cursor-pointer">
                                <div style="font-style: italic; font-weight: bold; color: #fe0;">
                                    @familiarity.Description
                                </div>
                            </MudTd>
                        }
                        else
                        {
                            int level = (int)familiarity.Level;
                        
                            <MudTd DataLabel="@localizer["navidialog_closeness"]" Class="cursor-pointer">
                                <MudRating SelectedValue="@level" MaxValue="5" ReadOnly="true"
                                           FullIcon="@Icons.Material.Filled.Favorite"
                                           EmptyIcon="@Icons.Material.Filled.FavoriteBorder"
                                           Color="Color.Secondary"/>
                            </MudTd>
                        }
                    }
                }
                @{
                    if (context.Id == 0)
                    {
                        <MudTd DataLabel="EXP" Class="cursor-pointer">N/A</MudTd>
                    }
                    else
                    {
                        <MudTd DataLabel="EXP" Class="cursor-pointer">@context.ClosenessPoint</MudTd>
                    }
                }
                @{
#pragma warning restore CS8602
                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@_pageSizeOptions" />
            </PagerContent>
        </MudTable>
        <MudText Class="mt-4 d-block" Typo="Typo.caption">
            <b>Selected Navigator:</b>
            @foreach (var selectItem in _selectedItems)
            {
                <b> @selectItem.Value | </b>
            }
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public uint[] Data { get; set; } = null!;

    [Parameter]
    public int MultiSelectCountLimit { get; set; } = 1;

    private HashSet<Navigator> _selectedItems = new();

    private int _selectedPage;

    private IReadOnlyList<Navigator> _list = new List<Navigator>();

    private string _searchString = string.Empty;

    private int[] _pageSizeOptions = { 5, 10, 25, 50, 100 };

    private MudTable<Navigator> _mudTable = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _list = NaviDataService.GetNavigatorSortedById();
        foreach (var selectData in Data)
        {
            var data = NaviDataService.GetNavigatorById(selectData);
            if (data != null)
                _selectedItems.Add(data);
        }
        var firstPageOption = _pageSizeOptions.ToList().FirstOrDefault();
        _selectedPage = CalculateCurrentPage(_list, _selectedItems.FirstOrDefault(), firstPageOption);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            _mudTable.CurrentPage = _selectedPage;
    }

    private int CalculateCurrentPage<T>(IEnumerable<T> items, T selectedItem, int rowsPerPage)
    {
        // Convert the IEnumerable to a list for better performance (if it's not already a list).
        var itemList = items.ToList();

        // Find the index of the selected item in the list.
        var selectedIndex = itemList.IndexOf(selectedItem);

        if (selectedIndex < 0)
        {
            // The selected item is not found in the list.
            Logger.LogError("Selected item is not part of the provided items list");
            selectedIndex = 0;
        }

        // Calculate the current page using integer division.
        var currentPage = selectedIndex / rowsPerPage;

        return currentPage;
    }

    private bool Filter(Navigator? item)
    {
        if (item is null)
        {
            return false;
        }
        var aggregate = $"{item.Value}{item.ValueJP}{item.ValueCN}{item.ValueTC}{item.Series}{item.SeriesJP}{item.SeriesCN}{item.SeriesTC}{item.Seiyuu}{item.SeiyuuJP}{item.SeiyuuCN}{item.SeiyuuTC}";
        return string.IsNullOrEmpty(_searchString) ||
               aggregate.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void Submit()
    {
        Data = _selectedItems.Select(x => x.Id).ToArray();

        MudDialog.Close(DialogResult.Ok(Data));
    }

    private void Cancel() => MudDialog.Cancel();

    private string SelectedRowClassFunc(Navigator element, int rowNumber)
    {
        if (_selectedItems.Contains(element))
            return "selected";
        else
            return string.Empty;
    }

    private void OnRowClick(TableRowClickEventArgs<Navigator> args)
    {
        if (_selectedItems.Any(x => x.Id == args.Item.Id))
        {
            _selectedItems.RemoveWhere(x => x.Id == args.Item.Id);
        }
        else
        {
            if (_selectedItems.Count() >= MultiSelectCountLimit)
            {
                if (MultiSelectCountLimit == 1)
                {
                    _selectedItems.Clear();
                    _selectedItems.Add(args.Item);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Cannot select more than {MultiSelectCountLimit} entries! \r\n Please de-select existing entries before you select a new entry.", Severity.Warning);
                    return;
                }
            }
            _selectedItems.Add(args.Item);
        }

        StateHasChanged();
    }
    
    private Func<Navigator, object> SortByNaviName()
    {
        if (Thread.CurrentThread.CurrentCulture.Name == "en-US")
        {
            return navi => navi.Value;
        }

        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hans")
        {
            return navi => navi.ValueCN;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant")
        {
            return navi => navi.ValueTC;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant-TW")
        {
            return navi => navi.ValueTC2;
        }

        return navi => navi.ValueJP;
    }
    
    private Func<Navigator, object> SortBySeriesName()
    {
        if (Thread.CurrentThread.CurrentCulture.Name == "en-US")
        {
            return navi => navi.Series;
        }

        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hans")
        {
            return navi => navi.SeriesCN;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant")
        {
            return navi => navi.SeriesTC;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant-TW")
        {
            return navi => navi.SeriesTC2;
        }

        return navi => navi.SeriesJP;
    }
    
    private Func<Navigator, object> SortBySeiyuuName()
    {
        if (Thread.CurrentThread.CurrentCulture.Name == "en-US")
        {
            return navi => navi.Seiyuu;
        }

        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hans")
        {
            return navi => navi.SeiyuuCN;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant")
        {
            return navi => navi.SeiyuuTC;
        }
        
        if (Thread.CurrentThread.CurrentCulture.Name == "zh-Hant-TW")
        {
            return navi => navi.SeiyuuTC2;
        }

        return navi => navi.SeiyuuJP;
    }
}