@using WebUIOver.Client.Pages.Dialogs
@using WebUIOver.Client.Constants
@using WebUIOver.Client.Services.Stamp
@using WebUIOver.Client.Validator
@using WebUIOver.Shared.Dto.Message
@using OneOf.Types

@inject IStampDataService StampDataService
@inject IDialogService DialogService
@inject INameValidator NameValidator

<MudGrid Class="align-center my-3">
    <MudItem xs="12" sm="6">
        @* <MudTextField @bind-Value="CustomMessage.MessageText" *@
        @*               Immediate="true" *@
        @*               Variant="Variant.Outlined" *@
        @*               Counter="@((int) NameLength.MessageMaxLength)" *@
        @*               MaxLength="@((int) NameLength.MessageMaxLength)" *@
        @*               Label="@DisplayLabel" *@
        @*               Validation="NameValidator.ValidateCustomizeMessage" *@
        @*               Disabled="@(!CanCustomizeTextMessage)"/> *@
        <MudAutocomplete T="string" Label="@DisplayLabel" @bind-Value="CustomMessage.MessageText" SearchFunc="@Search"
                                 ResetValueOnEmptyText="@ResetValueOnEmptyText"
                                 CoerceText="@CoerceText" CoerceValue="@CoerceValue" 
                                 Immediate="true"
                                 Variant="Variant.Outlined"
                                 Counter="@((int) NameLength.MessageMaxLength)"
                                 MaxLength="@((int) NameLength.MessageMaxLength)"
                                 Validation="@(new Func<string, IEnumerable<string>>(NameValidator.ValidateMessageEnumerable))" 
                                 Disabled="@(!CanCustomizeTextMessage)" />
    </MudItem>
    @if (ForDataCollection)
    {
        <MudItem xs="12" sm="6">
            <MudNumericField T="uint" @bind-Value="CustomMessage.UniqueMessageId" 
                             Label="@StampLabel" 
                             Variant="Variant.Text" Min="0" Max="1000" HelperText="0-1000"/>
        </MudItem>
    }
    else
    {
        <MudItem xs="10" sm="5">
            @{
                var imagePath = $"images/stamps/{CustomMessage.UniqueMessageId}.webp";
                var stamp = StampDataService.GetStampById(CustomMessage.UniqueMessageId);
                var stampName = StampDataService.GetStampById(CustomMessage.UniqueMessageId)?.Value ?? localizer["unknown_stamp"];

                if (CustomMessage.UniqueMessageId == 0)
                {
                    stampName = localizer["using_customize_message"];
                }
            }
            @if (stamp is not null && EnableImagePreview && CustomMessage.UniqueMessageId > 0)
            {
                <div class="d-flex justify-center">
                    <MudImage ObjectPosition="ObjectPosition.Center" Src="@imagePath" Fluid="true" ObjectFit="ObjectFit.Cover" Class="rounded-lg"/>
                </div>
            }
            <div class="d-flex justify-center">
                <MudText Align="Align.Center">@((MarkupString) stampName)</MudText>
            </div>
        </MudItem>
        <MudItem xs="2" sm="1">
            <MudIconButton Variant="Variant.Filled" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" aria-label="edit"
                           OnClick="() => OpenChangeStampsDialog(CustomMessage)"/>
        </MudItem>
    }
</MudGrid>

@code{
    [Parameter]
    public CustomMessage CustomMessage { get; set; } = new();

    [Parameter]
    public string DisplayLabel { get; set; } = string.Empty;
    
    [Parameter]
    public string StampLabel { get; set; } = string.Empty;
    
    [Parameter]
    public string[] Templates { get; set; } = Array.Empty<string>();

    [Parameter]
    public bool EnableImagePreview { get; set; } = true;

    private const bool ForDataCollection = false;

    private const bool ResetValueOnEmptyText = false;
    private const bool CoerceText = false;
    private const bool CoerceValue = true;
    
    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return Templates;
        return Templates.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private async Task OpenChangeStampsDialog(CustomMessage customMessage)
    {
        var parameters = new DialogParameters
        {
            { "Data", new[] { customMessage.UniqueMessageId } },
            { "EnableImagePreview", EnableImagePreview },
            { "HasCategory", false },
            { "SelectedString", "Selected Stamp: "},
            { "ImagePathPrefix", "images/stamps"},
            { "Mode", "Stamps" }
        };
        var dialog = await DialogService.ShowAsync<ChangeGeneralPreviewDialog>(localizer["dialogtitle_changestamp"], parameters, DialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            customMessage.UniqueMessageId = (result.Data as uint[])!.FirstOrDefault();
            StateHasChanged();
        }
    }

    private bool CanCustomizeTextMessage => CustomMessage.UniqueMessageId == 0;
    
    private static readonly DialogOptions DialogOptions = new()
    {
        CloseOnEscapeKey = false,
        BackdropClick = false,
        FullWidth = true,
        MaxWidth = MaxWidth.ExtraExtraLarge
    };
}