// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerOver.Persistence;

#nullable disable

namespace ServerOver.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20250629092940_CreateViews")]
    partial class CreateViews
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("ServerOver.Models.Boot.InvalidVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(384)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_invalid_visit");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleActionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ActionType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BattleHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("FrameTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("BattleHistoryId", "CardId");

                    b.HasIndex("Id", "BattleHistoryId");

                    b.ToTable("exvs2ob_battle_action_log");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleAlly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BattleHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BurstType")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Mastery")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("PrestigeId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SkinId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BattleHistoryId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("BattleHistoryId", "CardId");

                    b.HasIndex("Id", "BattleHistoryId");

                    b.ToTable("exvs2ob_battle_ally");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BattleMode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("BurstCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BurstType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ComboGivenDamage")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ConsecutiveWinCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("ElapsedSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GivenDamage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWin")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OverheatCount")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("PlayedAt")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ScoreRank")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("StageId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TakenDamage")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalExBurstDamage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("Id");

                    b.HasIndex("PlayedAt");

                    b.HasIndex("Id", "CardId");

                    b.ToTable("exvs2ob_battle_history");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleSelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BattleHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BurstType")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Mastery")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("PrestigeId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SkinId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BattleHistoryId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("BattleHistoryId", "CardId");

                    b.HasIndex("Id", "BattleHistoryId");

                    b.ToTable("exvs2ob_battle_self");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BattleHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BurstType")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Mastery")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("PrestigeId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SkinId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("BattleHistoryId", "CardId");

                    b.HasIndex("Id", "BattleHistoryId");

                    b.ToTable("exvs2ob_battle_target");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.PreBattleHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("CurrentConsecutiveWins")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_pre_battle_history");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.LicenseScoreRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("LastObtainedScore")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("LicenseScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_license_score_record");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.PlayerBattleStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("TotalClassMatchTenConsecutiveWinCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalEnemyDefeatedCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalExBurstDamage")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalGivenDamage")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalNoDamageBattleCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_player_battle_statistic");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.PlayerBurstStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BurstType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("TotalBattle")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalWin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "BurstType");

                    b.ToTable("exvs2ob_player_burst_statistic");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.PlayerLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LevelMaxDispFlag")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PlayerExp")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PlayerLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PrestigeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_battle_player_level");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.SoloClassMatchRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassChangeStatus")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("MaxPosition")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rate")
                        .HasColumnType("REAL");

                    b.Property<uint>("TopPointRankEntryCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("WeeklyTotalBattleCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("WeeklyTotalWinCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_battle_solo_class_record");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.TeamClassMatchRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassChangeStatus")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("MaxPosition")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rate")
                        .HasColumnType("REAL");

                    b.Property<uint>("TopPointRankEntryCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("WeeklyTotalBattleCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("WeeklyTotalWinCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_battle_team_class_record");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.WinLossRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassSoloLose")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassSoloWin")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassTeamLose")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ClassTeamWin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("FesLose")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("FesWin")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("FreeLose")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("FreeWin")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ShuffleLose")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ShuffleWin")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TeamLose")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TeamWin")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalLose")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalWin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_battle_win_loss_record");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.CardProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChipId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistinctTeamFormationToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("Gp")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNewCard")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastLoginCabinet")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<ulong>("LastPlayedAt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadTokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_card_profile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.OnlineShuffleOpeningMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DownMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("DownUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LeftMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LeftUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageSettingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RightMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("RightUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TopMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TopUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MessageSettingId")
                        .IsUnique();

                    b.ToTable("exvs2ob_online_shuffle_opening_message");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.OnlineShufflePlayingMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DownMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("DownUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LeftMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LeftUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageSettingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RightMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("RightUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TopMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TopUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MessageSettingId")
                        .IsUnique();

                    b.ToTable("exvs2ob_online_shuffle_playing_message");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.OnlineShuffleResultMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DownMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("DownUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LeftMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LeftUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageSettingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RightMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("RightUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TopMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TopUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MessageSettingId")
                        .IsUnique();

                    b.ToTable("exvs2ob_online_shuffle_result_message");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.OpeningMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DownMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("DownUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LeftMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LeftUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageSettingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RightMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("RightUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TopMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TopUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MessageSettingId")
                        .IsUnique();

                    b.ToTable("exvs2ob_opening_message");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.PlayingMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DownMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("DownUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LeftMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LeftUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageSettingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RightMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("RightUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TopMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TopUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MessageSettingId")
                        .IsUnique();

                    b.ToTable("exvs2ob_playing_message");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.ResultMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DownMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("DownUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LeftMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LeftUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageSettingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RightMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("RightUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TopMessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TopUniqueMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MessageSettingId")
                        .IsUnique();

                    b.ToTable("exvs2ob_result_message");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Mission.ChallengeMissionProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("EffectiveDay")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("EffectiveMonth")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("EffectiveYear")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MaxConsecutiveWinCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalBattleCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalBattleWinCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalDamageCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalDefeatCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "EffectiveYear", "EffectiveMonth", "EffectiveDay");

                    b.ToTable("exvs2ob_challenge_mission_profile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.MobileSuit.FavouriteMobileSuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BattleNavId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BgmPlayMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BgmSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("BurstType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("GaugeDesignId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MstMobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OpenSkillpoint")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "MstMobileSuitId");

                    b.ToTable("exvs2ob_favourite_ms");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.MobileSuit.MobileSuitPvPStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("MstMobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalBattleCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalClassMatchTenConsecutiveWinCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalEnemyDefeatedCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalExBurstDamage")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalGivenDamage")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalNoDamageBattleCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalWinCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "MstMobileSuitId");

                    b.ToTable("exvs2ob_ms_pvp_stat");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.MobileSuit.MobileSuitSticker", b =>
                {
                    b.Property<int>("StickerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("MstMobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PoseId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("StickerBackgroundId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("StickerEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Tracker1")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Tracker2")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Tracker3")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("StickerId");

                    b.HasIndex("CardId");

                    b.HasIndex("StickerId");

                    b.HasIndex("CardId", "MstMobileSuitId");

                    b.ToTable("exvs2ob_ms_sticker");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.MobileSuit.MobileSuitUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CostumeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("MsUsedNum")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MstMobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SkinId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TriadBuddyPoint")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "MstMobileSuitId");

                    b.ToTable("exvs2ob_ms_usage");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Navi.Navi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BattleNavRemains")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BattleNavSettingFlag")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("GuestNavCostume")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GuestNavFamiliarity")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GuestNavId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GuestNavRemains")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GuestNavSettingFlag")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NewCostumeFlag")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "GuestNavId");

                    b.ToTable("exvs2ob_navi");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Profile.CustomizeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("DefaultBgmPlayMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultBgmSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("DefaultGaugeDesignId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StageRandoms")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_customize_profile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Profile.DefaultStickerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BasePanelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CommentPartsAId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CommentPartsBId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("StickerBackgroundId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("StickerEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Tracker1")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Tracker2")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Tracker3")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_default_sticker_profile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Profile.PlayerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ExTutorialDispFlag")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("FullLoadCardCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OpenEchelon")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("OpenRecord")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OpenSkillpoint")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_player_profile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Profile.TrainingProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BurstType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CommandGuideDisplay")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CpuAutoGuard")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CpuLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DamageDisplay")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ExBurstGauge")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MstMobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_training_profile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Replay.SharedUploadReplay", b =>
                {
                    b.Property<int>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BattleClass")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("MatchingMode")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MobileUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PilotsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("PlayedAt")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReplayServiceFlag")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ReplaySize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReturnMatchFlag")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SpecialFlag")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("StageId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TeamType")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ReplayId");

                    b.HasIndex("ReplayId");

                    b.HasIndex("CardId", "ReplayId");

                    b.ToTable("exvs2ob_shared_upload_replay");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Replay.UploadReplay", b =>
                {
                    b.Property<int>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BattleClass")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("MatchingMode")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MobileUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PilotsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong>("PlayedAt")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReplayServiceFlag")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ReplaySize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReturnMatchFlag")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SpecialFlag")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("StageId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TeamType")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ReplayId");

                    b.HasIndex("ReplayId");

                    b.HasIndex("CardId", "ReplayId");

                    b.ToTable("exvs2ob_upload_replay");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Room.PrivateMatchRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("MatchingAttribute")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MatchingType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrivateMatchRoomSettingId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RevengeFlag")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("RuleType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SelectableMsIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TagType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PrivateMatchRoomSettingId")
                        .IsUnique();

                    b.ToTable("exvs2ob_private_match_room");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.BoostSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("GpBoost")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GuestNavBoost")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_boost_setting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.GamepadSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AKey")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BKey")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("LbKey")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("LsbKey")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("LtKey")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("RbKey")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("RsbKey")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("RtKey")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("XKey")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("YKey")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_gamepad_setting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.GeneralSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FixPositionRadar")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_general_setting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.MessageSetting", b =>
                {
                    b.Property<int>("MessageSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowReceiveMessage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("MessagePosition")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("MessageSettingId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("MessageSettingId");

                    b.ToTable("exvs2ob_message_setting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.NaviSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BattleNavAdviseFlag")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BattleNavNotifyFlag")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_navi_setting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.PrivateMatchRoomSetting", b =>
                {
                    b.Property<int>("PrivateMatchRoomSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnablePrivateMatch")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrivateMatchHost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParticipatedPrivateRoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PrivateMatchRoomSettingId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("PrivateMatchRoomSettingId");

                    b.ToTable("exvs2ob_user_private_match_room_setting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.TeamSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("QuickOnlineTagCardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_team_setting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Team.OnlinePair", b =>
                {
                    b.Property<int>("PairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("PairId");

                    b.HasIndex("CardId");

                    b.ToTable("exvs2ob_online_pair");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Team.TagTeamData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BackgroundPartsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BgmId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BoostRemains")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("EffectId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("EmblemId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("NameColorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OnlineRankPoint")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SkillPoint")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SkillPointBoost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TeammateCardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("exvs2ob_tag_team_data");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.MobileSuit.MobileSuitClassMatchTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FavouriteMobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleBackgroundPartsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleOrnamentId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleTextId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FavouriteMobileSuitId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_ms_class_match_title");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.MobileSuit.MobileSuitDefaultTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FavouriteMobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleBackgroundPartsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleOrnamentId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleTextId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FavouriteMobileSuitId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_ms_default_title");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.MobileSuit.MobileSuitTriadTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FavouriteMobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleBackgroundPartsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleOrnamentId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleTextId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FavouriteMobileSuitId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_ms_triad_title");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.User.UserClassMatchTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TitleBackgroundPartsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleOrnamentId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleTextId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserTitleSettingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserTitleSettingId")
                        .IsUnique();

                    b.ToTable("exvs2ob_user_class_match_title");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.User.UserDefaultTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TitleBackgroundPartsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleOrnamentId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleTextId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserTitleSettingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserTitleSettingId")
                        .IsUnique();

                    b.ToTable("exvs2ob_user_default_title");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.User.UserTitleSetting", b =>
                {
                    b.Property<int>("UserTitleSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RandomTitleFlag")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserTitleSettingId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("UserTitleSettingId");

                    b.ToTable("exvs2ob_user_title_setting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.User.UserTriadTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("TitleBackgroundPartsId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleOrnamentId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TitleTextId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserTitleSettingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserTitleSettingId")
                        .IsUnique();

                    b.ToTable("exvs2ob_user_triad_title");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.Ranking.TriadClearTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CourseClearTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("exvs2ob_triad_clear_time");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.Ranking.TriadHighScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CourseHighScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("exvs2ob_triad_high_score");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.Ranking.TriadTargetDefeatedCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("DestroyCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("exvs2ob_triad_target_defeated_count");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.Ranking.TriadWantedDefeatedCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("DestroyCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("exvs2ob_triad_wanted_defeated_count");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.TriadCourseData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Highscore")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ReleasedAt")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalClearNum")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalPlayNum")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("CardId", "CourseId");

                    b.ToTable("exvs2ob_triad_course_data");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.TriadMiscInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CpuRibbons")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("TotalTriadScenePlayNum")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalTriadScore")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalTriadWantedDefeatNum")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_triad_misc_info");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.TriadPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AiLevel")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ArmorLevel")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BoosterLevel")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BurstType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<uint>("ExGaugeLevel")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("InfightAttackLevel")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MsSkill1")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MsSkill2")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MstMobileSuitId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ShootAttackLevel")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TriadBackgroundPartsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TriadTeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("exvs2ob_triad_partner");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Upload.UploadImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ImageId");

                    b.HasIndex("ImageId");

                    b.HasIndex("CardId", "ImageId");

                    b.ToTable("exvs2ob_upload_image");
                });

            modelBuilder.Entity("ServerOver.Views.Battle.PlayerLevelRankView", b =>
                {
                    b.Property<uint>("PlayerExp")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PlayerLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PrestigeId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalLose")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TotalWin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_player_level_rank_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.ClassMatch.Percentile.SoloAcePercentileView", b =>
                {
                    b.Property<uint>("RatePercentile")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RatePoint")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_solo_ace_percentile_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.ClassMatch.Percentile.SoloOverPercentileView", b =>
                {
                    b.Property<uint>("RatePercentile")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RatePoint")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_solo_over_percentile_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.ClassMatch.Percentile.SoloOverRankView", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rate")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_solo_over_rank_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.ClassMatch.Percentile.SoloPilotPercentileView", b =>
                {
                    b.Property<uint>("RatePercentile")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RatePoint")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_solo_pilot_percentile_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.ClassMatch.Percentile.SoloValiantPercentileView", b =>
                {
                    b.Property<uint>("RatePercentile")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RatePoint")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_solo_valiant_percentile_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.ClassMatch.Percentile.TeamAcePercentileView", b =>
                {
                    b.Property<uint>("RatePercentile")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RatePoint")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_team_ace_percentile_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.ClassMatch.Percentile.TeamOverPercentileView", b =>
                {
                    b.Property<uint>("RatePercentile")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RatePoint")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_team_over_percentile_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.ClassMatch.Percentile.TeamOverRankView", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rate")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_team_over_rank_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.ClassMatch.Percentile.TeamPilotPercentileView", b =>
                {
                    b.Property<uint>("RatePercentile")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RatePoint")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_team_pilot_percentile_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.ClassMatch.Percentile.TeamValiantPercentileView", b =>
                {
                    b.Property<uint>("RatePercentile")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RatePoint")
                        .HasColumnType("REAL");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_team_valiant_percentile_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.Triad.ClearTimeView", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CourseClearTime")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Year")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_triad_clear_time_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.Triad.HighScoreView", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CourseHighScore")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Year")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_triad_high_score_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.Triad.TargetDefeatedCountView", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DestroyCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Year")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_triad_target_defeated_count_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.Triad.WantedDefeatedCountView", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DestroyCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Year")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_triad_wanted_defeated_count_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.Usage.BurstUsageView", b =>
                {
                    b.Property<uint>("AggregatedTotalBattle")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AggregatedTotalWin")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BurstType")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_burst_usage_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Views.Usage.MobileSuitUsageView", b =>
                {
                    b.Property<uint>("AggregatedTotalBattle")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AggregatedTotalWin")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MstMobileSuitId")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("exvs2ob_mobile_suit_usage_view", (string)null);
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleActionLog", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Battle.History.BattleHistory", "BattleHistory")
                        .WithMany("ActionLogs")
                        .HasForeignKey("BattleHistoryId");

                    b.Navigation("BattleHistory");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleAlly", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Battle.History.BattleHistory", "BattleHistory")
                        .WithOne("Ally")
                        .HasForeignKey("ServerOver.Models.Cards.Battle.History.BattleAlly", "BattleHistoryId");

                    b.Navigation("BattleHistory");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleHistory", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("BattleHistories")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleSelf", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Battle.History.BattleHistory", "BattleHistory")
                        .WithOne("BattleSelf")
                        .HasForeignKey("ServerOver.Models.Cards.Battle.History.BattleSelf", "BattleHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BattleHistory");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleTarget", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Battle.History.BattleHistory", "BattleHistory")
                        .WithMany("Targets")
                        .HasForeignKey("BattleHistoryId");

                    b.Navigation("BattleHistory");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.PreBattleHistory", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("PreBattleHistory")
                        .HasForeignKey("ServerOver.Models.Cards.Battle.History.PreBattleHistory", "CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.LicenseScoreRecord", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("LicenseScoreRecord")
                        .HasForeignKey("ServerOver.Models.Cards.Battle.LicenseScoreRecord", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.PlayerBattleStatistic", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("PlayerBattleStatistic")
                        .HasForeignKey("ServerOver.Models.Cards.Battle.PlayerBattleStatistic", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.PlayerBurstStatistics", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("PlayerBurstStatistics")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.PlayerLevel", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("PlayerLevel")
                        .HasForeignKey("ServerOver.Models.Cards.Battle.PlayerLevel", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.SoloClassMatchRecord", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("SoloClassMatchRecord")
                        .HasForeignKey("ServerOver.Models.Cards.Battle.SoloClassMatchRecord", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.TeamClassMatchRecord", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("TeamClassMatchRecord")
                        .HasForeignKey("ServerOver.Models.Cards.Battle.TeamClassMatchRecord", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.WinLossRecord", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("WinLossRecord")
                        .HasForeignKey("ServerOver.Models.Cards.Battle.WinLossRecord", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.OnlineShuffleOpeningMessage", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Settings.MessageSetting", "MessageSetting")
                        .WithOne("OnlineShuffleOpeningMessage")
                        .HasForeignKey("ServerOver.Models.Cards.Message.OnlineShuffleOpeningMessage", "MessageSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageSetting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.OnlineShufflePlayingMessage", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Settings.MessageSetting", "MessageSetting")
                        .WithOne("OnlineShufflePlayingMessage")
                        .HasForeignKey("ServerOver.Models.Cards.Message.OnlineShufflePlayingMessage", "MessageSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageSetting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.OnlineShuffleResultMessage", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Settings.MessageSetting", "MessageSetting")
                        .WithOne("OnlineShuffleResultMessage")
                        .HasForeignKey("ServerOver.Models.Cards.Message.OnlineShuffleResultMessage", "MessageSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageSetting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.OpeningMessage", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Settings.MessageSetting", "MessageSetting")
                        .WithOne("OpeningMessage")
                        .HasForeignKey("ServerOver.Models.Cards.Message.OpeningMessage", "MessageSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageSetting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.PlayingMessage", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Settings.MessageSetting", "MessageSetting")
                        .WithOne("PlayingMessage")
                        .HasForeignKey("ServerOver.Models.Cards.Message.PlayingMessage", "MessageSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageSetting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Message.ResultMessage", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Settings.MessageSetting", "MessageSetting")
                        .WithOne("ResultMessage")
                        .HasForeignKey("ServerOver.Models.Cards.Message.ResultMessage", "MessageSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageSetting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Mission.ChallengeMissionProfile", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("ChallengeMissionProfile")
                        .HasForeignKey("ServerOver.Models.Cards.Mission.ChallengeMissionProfile", "CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.MobileSuit.FavouriteMobileSuit", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("FavouriteMobileSuits")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.MobileSuit.MobileSuitPvPStatistic", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("MobileSuitPvPStatistics")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.MobileSuit.MobileSuitSticker", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("MobileSuitStickers")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.MobileSuit.MobileSuitUsage", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("MobileSuits")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Navi.Navi", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("Navis")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Profile.CustomizeProfile", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("CustomizeProfile")
                        .HasForeignKey("ServerOver.Models.Cards.Profile.CustomizeProfile", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Profile.DefaultStickerProfile", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("DefaultStickerProfile")
                        .HasForeignKey("ServerOver.Models.Cards.Profile.DefaultStickerProfile", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Profile.PlayerProfile", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("PlayerProfile")
                        .HasForeignKey("ServerOver.Models.Cards.Profile.PlayerProfile", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Profile.TrainingProfile", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("TrainingProfile")
                        .HasForeignKey("ServerOver.Models.Cards.Profile.TrainingProfile", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Replay.SharedUploadReplay", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("SharedUploadReplays")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Replay.UploadReplay", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("UploadReplays")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Room.PrivateMatchRoom", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Settings.PrivateMatchRoomSetting", "PrivateMatchRoomSetting")
                        .WithOne("SelfPrivateRoomConfig")
                        .HasForeignKey("ServerOver.Models.Cards.Room.PrivateMatchRoom", "PrivateMatchRoomSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateMatchRoomSetting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.BoostSetting", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("BoostSetting")
                        .HasForeignKey("ServerOver.Models.Cards.Settings.BoostSetting", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.GamepadSetting", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("GamepadSetting")
                        .HasForeignKey("ServerOver.Models.Cards.Settings.GamepadSetting", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.GeneralSetting", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("GeneralSetting")
                        .HasForeignKey("ServerOver.Models.Cards.Settings.GeneralSetting", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.MessageSetting", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("MessageSetting")
                        .HasForeignKey("ServerOver.Models.Cards.Settings.MessageSetting", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.NaviSetting", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("NaviSetting")
                        .HasForeignKey("ServerOver.Models.Cards.Settings.NaviSetting", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.PrivateMatchRoomSetting", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("PrivateMatchRoomSetting")
                        .HasForeignKey("ServerOver.Models.Cards.Settings.PrivateMatchRoomSetting", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.TeamSetting", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("TeamSetting")
                        .HasForeignKey("ServerOver.Models.Cards.Settings.TeamSetting", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Team.OnlinePair", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("OnlinePairs")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Team.TagTeamData", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("TagTeamDatas")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.MobileSuit.MobileSuitClassMatchTitle", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.MobileSuit.FavouriteMobileSuit", "FavouriteMobileSuit")
                        .WithOne("MobileSuitClassMatchTitle")
                        .HasForeignKey("ServerOver.Models.Cards.Titles.MobileSuit.MobileSuitClassMatchTitle", "FavouriteMobileSuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavouriteMobileSuit");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.MobileSuit.MobileSuitDefaultTitle", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.MobileSuit.FavouriteMobileSuit", "FavouriteMobileSuit")
                        .WithOne("MobileSuitDefaultTitle")
                        .HasForeignKey("ServerOver.Models.Cards.Titles.MobileSuit.MobileSuitDefaultTitle", "FavouriteMobileSuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavouriteMobileSuit");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.MobileSuit.MobileSuitTriadTitle", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.MobileSuit.FavouriteMobileSuit", "FavouriteMobileSuit")
                        .WithOne("MobileSuitTriadTitle")
                        .HasForeignKey("ServerOver.Models.Cards.Titles.MobileSuit.MobileSuitTriadTitle", "FavouriteMobileSuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavouriteMobileSuit");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.User.UserClassMatchTitle", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Titles.User.UserTitleSetting", "UserTitleSetting")
                        .WithOne("UserClassMatchTitle")
                        .HasForeignKey("ServerOver.Models.Cards.Titles.User.UserClassMatchTitle", "UserTitleSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTitleSetting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.User.UserDefaultTitle", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Titles.User.UserTitleSetting", "UserTitleSetting")
                        .WithOne("UserDefaultTitle")
                        .HasForeignKey("ServerOver.Models.Cards.Titles.User.UserDefaultTitle", "UserTitleSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTitleSetting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.User.UserTitleSetting", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("UserTitleSetting")
                        .HasForeignKey("ServerOver.Models.Cards.Titles.User.UserTitleSetting", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.User.UserTriadTitle", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.Titles.User.UserTitleSetting", "UserTitleSetting")
                        .WithOne("UserTriadTitle")
                        .HasForeignKey("ServerOver.Models.Cards.Titles.User.UserTriadTitle", "UserTitleSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTitleSetting");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.Ranking.TriadClearTime", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("TriadClearTimes")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.Ranking.TriadHighScore", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("TriadHighScores")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.Ranking.TriadTargetDefeatedCount", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("TriadTargetDefeatedCounts")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.Ranking.TriadWantedDefeatedCount", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("TriadWantedDefeatedCounts")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.TriadCourseData", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("TriadCourseDatas")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.TriadMiscInfo", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("TriadMiscInfo")
                        .HasForeignKey("ServerOver.Models.Cards.Triad.TriadMiscInfo", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Triad.TriadPartner", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithOne("TriadPartner")
                        .HasForeignKey("ServerOver.Models.Cards.Triad.TriadPartner", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Upload.UploadImage", b =>
                {
                    b.HasOne("ServerOver.Models.Cards.CardProfile", "CardProfile")
                        .WithMany("UploadImages")
                        .HasForeignKey("CardId");

                    b.Navigation("CardProfile");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Battle.History.BattleHistory", b =>
                {
                    b.Navigation("ActionLogs");

                    b.Navigation("Ally");

                    b.Navigation("BattleSelf")
                        .IsRequired();

                    b.Navigation("Targets");
                });

            modelBuilder.Entity("ServerOver.Models.Cards.CardProfile", b =>
                {
                    b.Navigation("BattleHistories");

                    b.Navigation("BoostSetting")
                        .IsRequired();

                    b.Navigation("ChallengeMissionProfile");

                    b.Navigation("CustomizeProfile")
                        .IsRequired();

                    b.Navigation("DefaultStickerProfile")
                        .IsRequired();

                    b.Navigation("FavouriteMobileSuits");

                    b.Navigation("GamepadSetting")
                        .IsRequired();

                    b.Navigation("GeneralSetting")
                        .IsRequired();

                    b.Navigation("LicenseScoreRecord")
                        .IsRequired();

                    b.Navigation("MessageSetting")
                        .IsRequired();

                    b.Navigation("MobileSuitPvPStatistics");

                    b.Navigation("MobileSuitStickers");

                    b.Navigation("MobileSuits");

                    b.Navigation("NaviSetting")
                        .IsRequired();

                    b.Navigation("Navis");

                    b.Navigation("OnlinePairs");

                    b.Navigation("PlayerBattleStatistic")
                        .IsRequired();

                    b.Navigation("PlayerBurstStatistics");

                    b.Navigation("PlayerLevel")
                        .IsRequired();

                    b.Navigation("PlayerProfile")
                        .IsRequired();

                    b.Navigation("PreBattleHistory");

                    b.Navigation("PrivateMatchRoomSetting")
                        .IsRequired();

                    b.Navigation("SharedUploadReplays");

                    b.Navigation("SoloClassMatchRecord")
                        .IsRequired();

                    b.Navigation("TagTeamDatas");

                    b.Navigation("TeamClassMatchRecord")
                        .IsRequired();

                    b.Navigation("TeamSetting")
                        .IsRequired();

                    b.Navigation("TrainingProfile")
                        .IsRequired();

                    b.Navigation("TriadClearTimes");

                    b.Navigation("TriadCourseDatas");

                    b.Navigation("TriadHighScores");

                    b.Navigation("TriadMiscInfo")
                        .IsRequired();

                    b.Navigation("TriadPartner")
                        .IsRequired();

                    b.Navigation("TriadTargetDefeatedCounts");

                    b.Navigation("TriadWantedDefeatedCounts");

                    b.Navigation("UploadImages");

                    b.Navigation("UploadReplays");

                    b.Navigation("UserTitleSetting")
                        .IsRequired();

                    b.Navigation("WinLossRecord")
                        .IsRequired();
                });

            modelBuilder.Entity("ServerOver.Models.Cards.MobileSuit.FavouriteMobileSuit", b =>
                {
                    b.Navigation("MobileSuitClassMatchTitle")
                        .IsRequired();

                    b.Navigation("MobileSuitDefaultTitle")
                        .IsRequired();

                    b.Navigation("MobileSuitTriadTitle")
                        .IsRequired();
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.MessageSetting", b =>
                {
                    b.Navigation("OnlineShuffleOpeningMessage")
                        .IsRequired();

                    b.Navigation("OnlineShufflePlayingMessage")
                        .IsRequired();

                    b.Navigation("OnlineShuffleResultMessage")
                        .IsRequired();

                    b.Navigation("OpeningMessage")
                        .IsRequired();

                    b.Navigation("PlayingMessage")
                        .IsRequired();

                    b.Navigation("ResultMessage")
                        .IsRequired();
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Settings.PrivateMatchRoomSetting", b =>
                {
                    b.Navigation("SelfPrivateRoomConfig")
                        .IsRequired();
                });

            modelBuilder.Entity("ServerOver.Models.Cards.Titles.User.UserTitleSetting", b =>
                {
                    b.Navigation("UserClassMatchTitle")
                        .IsRequired();

                    b.Navigation("UserDefaultTitle")
                        .IsRequired();

                    b.Navigation("UserTriadTitle")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
